import logging, random, re, time, traceback, requests
from datetime import datetime, timedelta, timezone

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN     = "5526925742:AAEnEEnlGcnzqcWIVFFeQsniVPDzImuUhvg"
CHAT_IDS  = ["696601899"]

URL       = ("https://zakup.sk.kz/#/ext?"
             "tabs=advert&q=–≠–∫—Å–ø–µ—Ä—Ç–∏–∑&adst=PUBLISHED&lst=PUBLISHED&page=1")
WAIT_SEL  = "div.block-footer"

CHECK_INTERVAL       = 300      # 5 –º–∏–Ω
JITTER_SECONDS       = 30
MAX_CONSEC_ERRORS    = 4
DRIVER_REFRESH_HOURS = 6
BACKOFF_STEP         = 60
BACKOFF_MAX          = 900

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s [%(levelname)s] %(message)s")

# ‚îÄ‚îÄ‚îÄ Telegram ‚îÄ‚îÄ‚îÄ
def tg_send(msg: str):
    for cid in CHAT_IDS:
        try:
            r = requests.post(f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                              data={"chat_id": cid, "text": msg}, timeout=10)
            if r.status_code != 200:
                logging.error("TG %s: %s", r.status_code, r.text)
        except Exception as e:
            logging.error("TG error: %s", e)

# ‚îÄ‚îÄ‚îÄ WebDriver ‚îÄ‚îÄ‚îÄ
def make_driver():
    opts = webdriver.ChromeOptions()
    opts.add_argument("--headless=new")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-gpu")
    opts.add_argument("--disable-dev-shm-usage")
    return webdriver.Chrome(service=Service("/usr/bin/chromedriver"),
                            options=opts)

# ‚îÄ‚îÄ‚îÄ –ü–∞—Ä—Å–∏–Ω–≥ ‚îÄ‚îÄ‚îÄ
_rx = re.compile(r"–ù–∞–π–¥–µ–Ω–æ\s+(\d+)")
def fetch_count(driver):
    driver.get(URL)
    WebDriverWait(driver, 30).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, WAIT_SEL)))
    txt = driver.execute_script("return document.body.innerText")
    m = _rx.search(txt)
    return int(m.group(1)) if m else None

# ‚îÄ‚îÄ‚îÄ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ‚îÄ‚îÄ‚îÄ
def main():
    driver = make_driver()
    born   = datetime.now(tz=timezone.utc)

    last, err, backoff, down = None, 0, 0, False
    tg_send("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")

    while True:
        start = time.time()

        # –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞
        if datetime.now(tz=timezone.utc) - born > timedelta(hours=DRIVER_REFRESH_HOURS):
            logging.info("Refresh driver (%.1fh)", DRIVER_REFRESH_HOURS)
            driver.quit(); driver = make_driver(); born = datetime.now(tz=timezone.utc)

        try:
            cnt = fetch_count(driver)
            if cnt is None:
                raise ValueError("–°—Ç—Ä–æ–∫–∞ ¬´–ù–∞–π–¥–µ–Ω–æ ‚Ä¶¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            if down:
                tg_send("‚úÖ –°–≤—è–∑—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"); down = False
            err = backoff = 0

            if last is None:
                last = cnt; logging.info("Initial count: %d", cnt)
            elif cnt != last:
                diff = cnt - last
                arrow = "üî∫" if diff > 0 else "üîª"
                msg = f"{arrow} –õ–æ—Ç—ã: {last} ‚Üí {cnt} (Œî {diff:+})"
                tg_send(msg); logging.info(msg); last = cnt
            else:
                logging.info("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (%d)", cnt)

        except (TimeoutException, WebDriverException, Exception) as e:
            err += 1
            logging.warning("Fetch failed (%d): %s", err, e)
            logging.debug("Trace:\n%s", traceback.format_exc())

            if not down:
                tg_send(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–∞–π—Ç–æ–º: {e}"); down = True
            if err >= MAX_CONSEC_ERRORS:
                logging.error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞")
                driver.quit(); driver = make_driver(); born = datetime.now(tz=timezone.utc); err = 0
            backoff = min(backoff + BACKOFF_STEP, BACKOFF_MAX)

        sleep_s = max(0, CHECK_INTERVAL + random.randint(-JITTER_SECONDS, JITTER_SECONDS)
                         + backoff - (time.time() - start))
        logging.info("Sleep %.1fs (backoff %ds)", sleep_s, backoff)
        time.sleep(sleep_s)

if __name__ == "__main__":
    main()