"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ—Ç–æ–≤ zakup.sk.kz ‚Üí Telegram.

‚Ä¢ –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É.
‚Ä¢ –ï—Å–ª–∏ —Å–∞–π—Ç/–¥—Ä–∞–π–≤–µ—Ä –æ—Ç–ø–∞–¥–∞–µ—Ç, –∫–æ–¥:
    ‚Äì –ª–æ–≤–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ;
    ‚Äì –¥–µ–ª–∞–µ—Ç –ø–∞—É–∑—É (back-off);
    ‚Äì –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ N –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç Chrome-–¥—Ä–∞–π–≤–µ—Ä;
    ‚Äì –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ TG —Ç–æ–ª—å–∫–æ –æ –ø–µ—Ä–≤–æ–º —Å–±–æ–µ –∏ –æ ¬´–≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–∏¬ª.
"""

from future import annotations

import random
import time
import traceback
import re
import logging
import requests
from datetime import datetime, timedelta, timezone

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from webdriver_manager.chrome import ChromeDriverManager

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîß –ù–ê–°–¢–†–û–ô–ö–ò
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN: str = "5526925742:AAEnEEnlGcnzqcWIVFFeQsniVPDzImuUhvg"
CHAT_IDS: list[str] = ["696601899"]

URL = (
    "https://zakup.sk.kz/#/ext?"
    "tabs=advert&q=–≠–∫—Å–ø–µ—Ä—Ç–∏–∑&adst=PUBLISHED&lst=PUBLISHED&page=1"
)
WAIT_SELECTOR = "div.block-footer"   # –±–ª–æ–∫, –≥–¥–µ –µ—Å—Ç—å ¬´–ù–∞–π–¥–µ–Ω–æ ‚Ä¶¬ª

CHECK_INTERVAL = 300                 # –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (5 –º–∏–Ω)
JITTER_SECONDS = 30                  # ¬± –¥–∂–∏—Ç—Ç–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –±–∏—Ç—å –≤ —Ä–æ–≤–Ω—É—é –º–∏–Ω—É—Ç—É
MAX_CONSECUTIVE_ERRORS = 4           # —Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥ –æ—à–∏–±–æ–∫ ‚Üí —Ä–µ—Å—Ç–∞—Ä—Ç –¥—Ä–∞–π–≤–µ—Ä–∞
DRIVER_REFRESH_HOURS = 6             # –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç –∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤

BACKOFF_STEP = 60                    # —Å–µ–∫—É–Ω–¥ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–¥–µ—Ä–∂–∫–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
BACKOFF_MAX = 15 * 60                # –Ω–µ –±–æ–ª—å—à–µ 15 –º–∏–Ω –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏—è—Ö

LOG_FILE = "monitor.log"
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.FileHandler(LOG_FILE), logging.StreamHandler()],
)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üì© TELEGRAM
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def tg_send(text: str) -> None:
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    for chat_id in CHAT_IDS:
        try:
            r = requests.post(url, data={"chat_id": chat_id, "text": text}, timeout=10)
            if r.status_code != 200:
                logging.error("TG %s: %s", r.status_code, r.text)
        except Exception as exc:      # pylint: disable=broad-except
            logging.error("TG error: %s", exc)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üåê SELENIUM
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def make_driver() -> webdriver.Chrome:
    opts = webdriver.ChromeOptions()
    opts.add_argument("--headless=new")
    opts.add_argument("--disable-gpu")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    return webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=opts)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîç –ü–ê–†–°–ò–ù–ì
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_RE = re.compile(r"–ù–∞–π–¥–µ–Ω–æ\s+(\d+)")


def parse_count(text: str) -> int | None:
    m = _RE.search(text)
    return int(m.group(1)) if m else None


def fetch_count(driver: webdriver.Chrome) -> int | None:
    driver.get(URL)
    WebDriverWait(driver, 30).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, WAIT_SELECTOR))
    )
    time.sleep(2)           # –¥–∞—ë–º JS –¥–æ—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è
    txt = driver.execute_script("return document.body.innerText")
    return parse_count(txt)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîÅ –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    driver = make_driver()
    driver_birth = datetime.now(tz=timezone.utc)

    last_count: int | None = None
    consecutive_err = 0
    backoff = 0
    sent_down_notice = False

    tg_send("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω.")
    logging.info("Started monitor.")

    try:
        while True:
            start = time.time()

            # –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç –¥—Ä–∞–π–≤–µ—Ä–∞ —Ä–∞–∑ –≤ N —á–∞—Å–æ–≤
            if datetime.now(tz=timezone.utc) - driver_birth > timedelta(hours=DRIVER_REFRESH_HOURS):
                logging.info("Refreshing Chrome driver (%.1fh).", DRIVER_REFRESH_HOURS)
                try:
                    driver.quit()
                except Exception:      # pylint: disable=broad-except
                    pass
                driver = make_driver()
                driver_birth = datetime.now(tz=timezone.utc)

            try:
                count = fetch_count(driver)
                if count is None:
                    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ –ª–æ—Ç–æ–≤.")

                # –µ—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏ —Ä–∞–Ω–µ–µ ‚Äî —Å–∞–π—Ç ¬´–æ–∂–∏–ª¬ª
                if sent_down_notice:
                    tg_send("‚úÖ –°–≤—è–∑—å —Å zakup.sk.kz –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                    sent_down_notice = False

                consecutive_err = 0
                backoff = 0

                if last_count is None:
                    last_count = count
                    logging.info("Initial count: %d", count)
                elif count != last_count:
                    diff = count - last_count
                    arrow = "üî∫" if diff > 0 else "üîª"
                    msg = f"{arrow} –õ–æ—Ç—ã: {last_count} ‚Üí {count} (Œî {diff:+})"
                    tg_send(msg)
                    logging.info(msg)
                    last_count = count
                else:
                    logging.info("Unchanged (%d).", count)

            except (TimeoutException, WebDriverException, Exception) as exc:
                consecutive_err += 1
                logging.warning("Fetch failed (%d): %s", consecutive_err, exc)
                logging.debug("Trace:\n%s", traceback.format_exc())

                # –ø–µ—Ä–≤–∞—è –æ—à–∏–±–∫–∞ ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not sent_down_notice:
                    tg_send(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å zakup.sk.kz: {exc}")
                    sent_down_notice = True

                # –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ –º–Ω–æ–≥–æ ‚Äî –ø–æ–ª–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç –¥—Ä–∞–π–≤–µ—Ä–∞
                if consecutive_err >= MAX_CONSECUTIVE_ERRORS:
                    logging.error("Too many errors, restarting driver.")
                    try:
                        driver.quit()
                    except Exception:  # pylint: disable=broad-except
                        pass
                    driver = make_driver()
                    driver_birth = datetime.now(tz=timezone.utc)
                    consecutive_err = 0

                # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É
                backoff = min(backoff + BACKOFF_STEP, BACKOFF_MAX)

            # –≤—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–ø–∞—Ç—å
            base_sleep = CHECK_INTERVAL + random.randint(-JITTER_SECONDS, JITTER_SECONDS)
            sleep_for = max(0, base_sleep + backoff - (time.time() - start))
            logging.info("Sleep %.1fs (backoff %ds).", sleep_for, backoff)
            time.sleep(sleep_for)

    except KeyboardInterrupt:
        logging.info("Interrupted by user.")
    finally:
        try:
            driver.quit()
        except Exception:              # pylint: disable=broad-except
            pass
            

if __name__ == "__main__":
    main()